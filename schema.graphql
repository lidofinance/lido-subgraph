"""
Lido
"""
type LidoSubmission @entity {
  id: ID!
  sender: Bytes!
  amount: BigInt!
  referral: Bytes!
}

type LidoFee @entity {
  id: ID!
  feeBasisPoints: Int!
}

type LidoFeeDistribution @entity {
  id: ID!
  treasuryFeeBasisPoints: Int!
  insuranceFeeBasisPoints: Int!
  operatorsFeeBasisPoints: Int!
}

type LidoWithdrawal @entity {
  id: ID!
  sender: Bytes!
  tokenAmount: BigInt!
  sentFromBuffer: BigInt!
  pubkeyHash: Bytes!
  etherAmount: BigInt!
}

type LidoUnbuffered @entity {
  id: ID!
  amount: BigInt!
}

type LidoTransfer @entity {
  id: ID!
  from: Bytes!
  to: Bytes!
  value: BigInt!
}

type LidoApproval @entity {
  id: ID!
  owner: Bytes!
  spender: Bytes!
  value: BigInt!
}

type LidoStopped @entity {
  id: ID!
  blocktime: BigInt!
}

type LidoResumed @entity {
  id: ID!
  blocktime: BigInt!
}

"""
LidoOracle
"""
type OracleCompleted @entity {
  id: ID!
  epochId: BigInt!
  beaconBalance: BigInt!
  beaconValidators: BigInt!
}

type OracleMember @entity {
  id: ID!
  member: Bytes!
  removed: Boolean!
}

type OracleQuorumChange @entity {
  id: ID!
  quorum: BigInt!
}

"""
NodeOperatorsRegistry
"""
type NodeOperatorSigningKey @entity {
  id: ID!
  operatorId: BigInt!
  pubkey: Bytes!
  removed: Boolean!
}

type NodeOperator @entity {
  id: ID!
  name: String!
  rewardAddress: Bytes!
  stakingLimit: BigInt!
  active: Boolean!
  totalStoppedValidators: BigInt
}

"""
Voting
"""
type Voting @entity {
  id: ID!
  index: Int!
  creator: Bytes!
  metadata: String!
  executed: Boolean!
  votes: [Vote!]! @derivedFrom(field: "voting")
}

type Vote @entity {
  id: ID!
  voting: Voting!
  voter: Bytes!
  supports: Boolean!
  stake: BigInt!
}

type ChangedSupportRequired @entity {
  id: ID!
  supportRequiredPct: BigInt!
}

type ChangedMinQuorum @entity {
  id: ID!
  minAcceptQuorumPct: BigInt!
}
