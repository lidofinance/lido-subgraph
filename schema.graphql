"""
Lido
"""
type LidoStopped @entity {
  id: ID!

  block: BigInt!
  blockTime: BigInt!
}

type LidoResumed @entity {
  id: ID!

  block: BigInt!
  blockTime: BigInt!
}

type LidoTransfer @entity {
  id: ID!

  from: Bytes!
  to: Bytes!
  value: BigInt!

  shares: BigInt
  sharesBeforeDecrease: BigInt
  sharesAfterDecrease: BigInt
  sharesBeforeIncrease: BigInt
  sharesAfterIncrease: BigInt

  mintWithoutSubmission: Boolean!

  totalPooledEther: BigInt!
  totalShares: BigInt!

  balanceAfterDecrease: BigInt
  balanceAfterIncrease: BigInt

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
  transactionLogIndex: BigInt!
}

type LidoApproval @entity {
  id: ID!

  owner: Bytes!
  spender: Bytes!
  value: BigInt!
}

type LidoFee @entity {
  id: ID!

  feeBasisPoints: Int!
}

type LidoFeeDistribution @entity {
  id: ID!

  treasuryFeeBasisPoints: Int!
  insuranceFeeBasisPoints: Int!
  operatorsFeeBasisPoints: Int!
}

type LidoWithdrawalCredential @entity {
  id: ID!

  withdrawalCredentials: Bytes!

  block: BigInt!
  blockTime: BigInt!
}

type LidoSubmission @entity {
  id: ID!

  sender: Bytes!
  amount: BigInt!
  referral: Bytes!

  shares: BigInt!
  sharesBefore: BigInt!
  sharesAfter: BigInt!

  totalPooledEtherBefore: BigInt!
  totalPooledEtherAfter: BigInt!
  totalSharesBefore: BigInt!
  totalSharesAfter: BigInt!

  balanceAfter: BigInt!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
  transactionLogIndex: BigInt!
}

type LidoUnbuffered @entity {
  id: ID!

  amount: BigInt!
}

type LidoWithdrawal @entity {
  id: ID!

  sender: Bytes!
  tokenAmount: BigInt!
  sentFromBuffer: BigInt!
  pubkeyHash: Bytes!
  etherAmount: BigInt!
}

type NodeOperatorFees @entity {
  id: ID!
  totalReward: TotalReward!

  address: Bytes!
  fee: BigInt!
}

type NodeOperatorsShares @entity {
  id: ID!
  totalReward: TotalReward!

  address: Bytes!
  shares: BigInt!
}

type Totals @entity {
  id: ID!

  totalPooledEther: BigInt!
  totalShares: BigInt!
}

type Stats @entity {
  id: ID!

  uniqueHolders: BigInt
  uniqueAnytimeHolders: BigInt
}

type Shares @entity {
  id: ID!

  shares: BigInt!
}

type Holder @entity {
  id: ID!

  address: Bytes!
}

type CurrentFees @entity {
  id: ID!

  feeBasisPoints: BigInt
  treasuryFeeBasisPoints: BigInt
  insuranceFeeBasisPoints: BigInt
  operatorsFeeBasisPoints: BigInt
}

"""
LidoOracle
"""
type OracleCompleted @entity {
  id: ID!

  epochId: BigInt!
  beaconBalance: BigInt!
  beaconValidators: BigInt!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
}

"""
Main entity for daily rewards
"""
type TotalReward @entity {
  id: ID!

  "Total user rewards"
  totalRewards: BigInt!
  "Total user rewards + fees"
  totalRewardsWithFees: BigInt!

  "Fees received via validator MEV"
  mevFee: BigInt

  "Fee basis points eg fractions of total fees"
  feeBasis: BigInt!
  treasuryFeeBasisPoints: BigInt!
  insuranceFeeBasisPoints: BigInt!
  operatorsFeeBasisPoints: BigInt!

  "Fees and leftover dust after rounding"
  totalFee: BigInt!
  nodeOperatorFees: [NodeOperatorFees!] @derivedFrom(field: "totalReward")
  insuranceFee: BigInt
  treasuryFee: BigInt
  dust: BigInt

  "Total shares that were minted for distribution"
  shares2mint: BigInt!

  "Shares distributed to each destination"
  sharesToTreasury: BigInt!
  sharesToInsuranceFund: BigInt!
  sharesToOperators: BigInt!
  nodeOperatorsShares: [NodeOperatorsShares!] @derivedFrom(field: "totalReward")
  dustSharesToTreasury: BigInt!

  "State of the pool before and after rewards"
  totalPooledEtherBefore: BigInt!
  totalPooledEtherAfter: BigInt!
  totalSharesBefore: BigInt!
  totalSharesAfter: BigInt!

  "Data for easy APR calculations"
  postTotalPooledEther: BigInt
  preTotalPooledEther: BigInt
  timeElapsed: BigInt
  totalShares: BigInt

  "Raw APR from validator balances"
  aprRaw: BigDecimal!
  "Time-compensated APR eg account for a missed day of rewards between reports"
  aprBeforeFees: BigDecimal
  "User APR after fees and time correction"
  apr: BigDecimal!

  block: BigInt!
  blockTime: BigInt!
  transactionIndex: BigInt!
  logIndex: BigInt!
  transactionLogIndex: BigInt!
}

type OracleMember @entity {
  id: ID!

  member: Bytes!
  removed: Boolean!
}

type OracleQuorumChange @entity {
  id: ID!

  quorum: BigInt!
}

type OracleVersion @entity {
  id: ID!

  version: BigInt!

  block: BigInt!
  blockTime: BigInt!
}

type AllowedBeaconBalanceRelativeDecrease @entity {
  id: ID!

  value: BigInt!
}

type AllowedBeaconBalanceAnnualRelativeIncrease @entity {
  id: ID!

  value: BigInt!
}

type OracleExpectedEpoch @entity {
  id: ID!

  epochId: BigInt!
}

type BeaconReport @entity {
  id: ID!

  epochId: BigInt!
  beaconBalance: BigInt!
  beaconValidators: BigInt!
  caller: Bytes!
}

type BeaconSpec @entity {
  id: ID!

  epochsPerFrame: BigInt!
  slotsPerEpoch: BigInt!
  secondsPerSlot: BigInt!
  genesisTime: BigInt!
}

type BeaconReportReceiver @entity {
  id: ID!

  callback: Bytes!
}

"""
NodeOperatorsRegistry
"""
type NodeOperatorSigningKey @entity {
  id: ID!

  operatorId: BigInt!
  pubkey: Bytes!
  removed: Boolean!

  operator: NodeOperator!
}

type NodeOperator @entity {
  id: ID!

  name: String!
  rewardAddress: Bytes!
  stakingLimit: BigInt!
  active: Boolean!
  totalStoppedValidators: BigInt
}

type NodeOperatorTotalKeysTrim @entity {
  id: ID!

  operatorId: BigInt!
  totalKeysTrimmed: BigInt!

  operator: NodeOperator!

  block: BigInt!
  blockTime: BigInt!
}

type handleKeysOpIndexChange @entity {
  id: ID!

  index: BigInt!

  block: BigInt!
  blockTime: BigInt!
}

"""
Voting
"""
type Voting @entity {
  id: ID!

  index: Int!
  creator: Bytes!
  metadata: String!
  executed: Boolean!

  votes: [Vote!]! @derivedFrom(field: "voting")
  objections: [VotingObjection!]! @derivedFrom(field: "voting")
}

type Vote @entity {
  id: ID!

  voting: Voting!
  voter: Bytes!
  supports: Boolean!
  stake: BigInt!
}

type VotingObjection @entity {
  id: ID!

  voting: Voting!
  voter: Bytes!
  stake: BigInt!
}

type ChangedSupportRequired @entity {
  id: ID!

  supportRequiredPct: BigInt!
}

type ChangedMinQuorum @entity {
  id: ID!

  minAcceptQuorumPct: BigInt!
}

type ChangedVoteTime @entity {
  id: ID!

  voteTime: BigInt!
}

type ChangedObjectionPhaseTime @entity {
  id: ID!

  objectionPhaseTime: BigInt!
}

"""
Easytrack
"""
type Motion @entity {
  id: ID!

  creator: Bytes!
  evmScriptFactory: Bytes!
  duration: BigInt
  startDate: BigInt!
  snapshotBlock: BigInt!
  objectionsAmount: BigInt!
  objectionsAmountPct: BigInt!
  objectionsThreshold: BigInt
  evmScriptHash: Bytes!
  evmScriptCalldata: Bytes!
  status: String!
  enacted_at: BigInt
  canceled_at: BigInt
  rejected_at: BigInt
}

type EasyTrackConfig @entity {
  id: ID!

  evmScriptExecutor: Bytes
  motionDuration: BigInt
  motionsCountLimit: BigInt
  objectionsThreshold: BigInt
  isPaused: Boolean
}

type Role @entity {
  id: ID!

  role: Bytes!
  address: Bytes!
  creator: Bytes!
  isActive: Boolean!
}

type EVMScriptFactory @entity {
  id: ID!

  address: Bytes!
  permissions: Bytes!
  isActive: Boolean!
}

type Objection @entity {
  id: ID!

  motionId: BigInt!
  objector: Bytes!
  weight: BigInt!

  block: BigInt!
  blockTime: BigInt!
}

"""
DepositSecurityModule
"""
type DepositSecurityModuleSettings @entity {
  id: ID!

  paused: Boolean
  guardianQuorum: BigInt
  maxDeposits: BigInt
  minDepositBlockDistance: BigInt
  nodeOperatorsRegistry: Bytes
  owner: Bytes
  pauseIntentValidityPeriodBlocks: BigInt
}

type DepositsPause @entity {
  id: ID!

  guardian: Guardian!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
}

type DepositsUnpause @entity {
  id: ID!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
}

type Guardian @entity {
  id: ID!

  address: Bytes!
  removed: Boolean!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
}

type GuardianQuorumChange @entity {
  id: ID!

  guardianQuorum: BigInt!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
}

type MaxDepositsChange @entity {
  id: ID!

  maxDeposits: BigInt!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
}

type MinDepositBlockDistanceChange @entity {
  id: ID!

  minDepositBlockDistance: BigInt!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
}

type NodeOperatorsRegistryChange @entity {
  id: ID!

  nodeOperatorsRegistry: Bytes!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
}

type OwnerChange @entity {
  id: ID!

  owner: Bytes!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
}

type PauseIntentValidityPeriodBlocksChange @entity {
  id: ID!

  pauseIntentValidityPeriodBlocks: BigInt!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
}
